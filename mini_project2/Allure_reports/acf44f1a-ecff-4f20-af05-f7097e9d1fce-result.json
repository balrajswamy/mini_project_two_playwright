{"name": "test_miniproject2", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.TargetClosedError: Locator.fill: Target page, context or browser has been closed", "trace": "setup_teardown = <Page url='https://katalon-demo-cura.herokuapp.com/#appointment'>\n\n    @pytest.mark.positive\n    def test_miniproject2(setup_teardown):\n        page = setup_teardown\n    \n        expect(page).to_have_title(\"CURA Healthcare Service\")\n        page.locator(\"#btn-make-appointment\").click()\n        expect(page).to_have_url(\"https://katalon-demo-cura.herokuapp.com/profile.php#login\")\n        page.locator(\"#txt-username\").click()\n        page.locator(\"#txt-username\").fill(\"John Doe\")\n        time.sleep(1)\n        page.locator(\"//input[@id='txt-password']\").click()\n        page.locator(\"//input[@id='txt-password']\").fill(\"ThisIsNotAPassword\")\n        time.sleep(1)\n        page.locator(\"//button[@id='btn-login']\").click()\n        page.wait_for_load_state(\"networkidle\")\n        time.sleep(3)\n        expect(page).to_have_url(\"https://katalon-demo-cura.herokuapp.com/#appointment\")\n        #to select select option to place of hospital\n        try:\n            page.get_by_label(\"Facility\").select_option(\"Hongkong CURA Healthcare Center\")\n            print(\"\\n get_by_label selection\")\n        except:\n            page.locator(\"#combo_facility\").select_option(\"Hongkong CURA Healthcare Center\")\n            print(\"\\n selection by css selector\")\n    \n            # Optionally, verify the selection\n            selected_value = page.locator(\"#combo_facility\").input_value()\n            print(f\"Selected value: {selected_value}\")\n        try:\n            #page.locator(\"//input[@id='txt_visit_date']\").fill(\"20/12/2024\")\n            time.sleep(2)\n            #page.get_by_label(\"Visit Date (Required)\").fill(\"12/12/2024\")\n            page.get_by_placeholder(\"dd/mm/yyyy\").focus()\n            page.get_by_placeholder(\"dd/mm/yyyy\").fill(\"20/12/2025\")\n            #page.get_by_placeholder(\"dd/mm/yyyy\").press(\"Enter\")\n            #page.keyboard.press(\"Shift+Tab\")\n            page.mouse.click(100, 100)\n            time.sleep(3)\n    \n            time.sleep(3)\n            #page.get_by_label(\"Visit Date (Required)\").press(\"Enter\")\n            #page.get_by_placeholder(\"dd/mm/yyyy\").press(\"Tab\")\n    \n    \n            # Press the Escape key to close the date picker\n    \n    \n            page.get_by_label('Medicaid').check() # to select radio button)\n    \n            print(\"\\ndate filled by xpath!\")\n    \n>       except:\n\nmini_project_playwright.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\.venv\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:15795: in fill\n    self._sync(\n..\\..\\..\\.venv\\Lib\\site-packages\\playwright\\_impl\\_locator.py:208: in fill\n    return await self._frame.fill(self._selector, strict=True, **params)\n..\\..\\..\\.venv\\Lib\\site-packages\\playwright\\_impl\\_frame.py:527: in fill\n    await self._channel.send(\"fill\", locals_to_params(locals()))\n..\\..\\..\\.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x00000288C7258380>\ncb = <function Channel.send.<locals>.<lambda> at 0x00000288C75C3560>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TargetClosedError: Locator.fill: Target page, context or browser has been closed\n\n..\\..\\..\\.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TargetClosedError"}, "attachments": [{"name": "stdout", "source": "36426413-2163-4167-882d-2f6ed8f13733-attachment.txt", "type": "text/plain"}], "start": 1733209137529, "stop": 1733209273873, "uuid": "971b2546-4d34-4698-ba75-226268e2e6a4", "historyId": "053398d567e139111c871328ba1f7e38", "testCaseId": "053398d567e139111c871328ba1f7e38", "fullName": "tests.ex_03122024.mini_project2.mini_project_playwright#test_miniproject2", "labels": [{"name": "tag", "value": "positive"}, {"name": "parentSuite", "value": "tests.ex_03122024.mini_project2"}, {"name": "suite", "value": "mini_project_playwright"}, {"name": "host", "value": "DESKTOP-07C4ROQ"}, {"name": "thread", "value": "2536-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ex_03122024.mini_project2.mini_project_playwright"}]}